# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ocfl.v1 import index_pb2 as ocfl_dot_v1_dot_index__pb2


class IndexServiceStub(object):
    """IndexService is used to index and query OCFL objects in a repository.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStatus = channel.unary_unary(
                '/ocfl.v1.IndexService/GetStatus',
                request_serializer=ocfl_dot_v1_dot_index__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=ocfl_dot_v1_dot_index__pb2.GetStatusResponse.FromString,
                )
        self.IndexAll = channel.unary_unary(
                '/ocfl.v1.IndexService/IndexAll',
                request_serializer=ocfl_dot_v1_dot_index__pb2.IndexAllRequest.SerializeToString,
                response_deserializer=ocfl_dot_v1_dot_index__pb2.IndexAllResponse.FromString,
                )
        self.IndexIDs = channel.unary_unary(
                '/ocfl.v1.IndexService/IndexIDs',
                request_serializer=ocfl_dot_v1_dot_index__pb2.IndexIDsRequest.SerializeToString,
                response_deserializer=ocfl_dot_v1_dot_index__pb2.IndexIDsResponse.FromString,
                )
        self.ListObjects = channel.unary_unary(
                '/ocfl.v1.IndexService/ListObjects',
                request_serializer=ocfl_dot_v1_dot_index__pb2.ListObjectsRequest.SerializeToString,
                response_deserializer=ocfl_dot_v1_dot_index__pb2.ListObjectsResponse.FromString,
                )
        self.GetObject = channel.unary_unary(
                '/ocfl.v1.IndexService/GetObject',
                request_serializer=ocfl_dot_v1_dot_index__pb2.GetObjectRequest.SerializeToString,
                response_deserializer=ocfl_dot_v1_dot_index__pb2.GetObjectResponse.FromString,
                )
        self.GetObjectState = channel.unary_unary(
                '/ocfl.v1.IndexService/GetObjectState',
                request_serializer=ocfl_dot_v1_dot_index__pb2.GetObjectStateRequest.SerializeToString,
                response_deserializer=ocfl_dot_v1_dot_index__pb2.GetObjectStateResponse.FromString,
                )
        self.FollowLogs = channel.unary_stream(
                '/ocfl.v1.IndexService/FollowLogs',
                request_serializer=ocfl_dot_v1_dot_index__pb2.FollowLogsRequest.SerializeToString,
                response_deserializer=ocfl_dot_v1_dot_index__pb2.FollowLogsResponse.FromString,
                )


class IndexServiceServicer(object):
    """IndexService is used to index and query OCFL objects in a repository.
    """

    def GetStatus(self, request, context):
        """Get index status, counts, and storage root details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IndexAll(self, request, context):
        """Start an asynchronous indexing process to scan the storage root and ingest
        index inventories. Indexed objects not found during the storage root scan
        are removed from the index. IndexAll returns immediately with a status
        indicating whether the indexing process was started.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IndexIDs(self, request, context):
        """Index inventories for the specified object ids. Unlike IndexAll, IndexIDs
        returns after the object ids have been indexed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListObjects(self, request, context):
        """List all objects in the index in lexigraphical order by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObject(self, request, context):
        """Get details for a specific object in the index
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjectState(self, request, context):
        """Query the logical state of an OCFL object version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FollowLogs(self, request, context):
        """Stream log messages from indexing tasks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IndexServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=ocfl_dot_v1_dot_index__pb2.GetStatusRequest.FromString,
                    response_serializer=ocfl_dot_v1_dot_index__pb2.GetStatusResponse.SerializeToString,
            ),
            'IndexAll': grpc.unary_unary_rpc_method_handler(
                    servicer.IndexAll,
                    request_deserializer=ocfl_dot_v1_dot_index__pb2.IndexAllRequest.FromString,
                    response_serializer=ocfl_dot_v1_dot_index__pb2.IndexAllResponse.SerializeToString,
            ),
            'IndexIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.IndexIDs,
                    request_deserializer=ocfl_dot_v1_dot_index__pb2.IndexIDsRequest.FromString,
                    response_serializer=ocfl_dot_v1_dot_index__pb2.IndexIDsResponse.SerializeToString,
            ),
            'ListObjects': grpc.unary_unary_rpc_method_handler(
                    servicer.ListObjects,
                    request_deserializer=ocfl_dot_v1_dot_index__pb2.ListObjectsRequest.FromString,
                    response_serializer=ocfl_dot_v1_dot_index__pb2.ListObjectsResponse.SerializeToString,
            ),
            'GetObject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObject,
                    request_deserializer=ocfl_dot_v1_dot_index__pb2.GetObjectRequest.FromString,
                    response_serializer=ocfl_dot_v1_dot_index__pb2.GetObjectResponse.SerializeToString,
            ),
            'GetObjectState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObjectState,
                    request_deserializer=ocfl_dot_v1_dot_index__pb2.GetObjectStateRequest.FromString,
                    response_serializer=ocfl_dot_v1_dot_index__pb2.GetObjectStateResponse.SerializeToString,
            ),
            'FollowLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.FollowLogs,
                    request_deserializer=ocfl_dot_v1_dot_index__pb2.FollowLogsRequest.FromString,
                    response_serializer=ocfl_dot_v1_dot_index__pb2.FollowLogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocfl.v1.IndexService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IndexService(object):
    """IndexService is used to index and query OCFL objects in a repository.
    """

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocfl.v1.IndexService/GetStatus',
            ocfl_dot_v1_dot_index__pb2.GetStatusRequest.SerializeToString,
            ocfl_dot_v1_dot_index__pb2.GetStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IndexAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocfl.v1.IndexService/IndexAll',
            ocfl_dot_v1_dot_index__pb2.IndexAllRequest.SerializeToString,
            ocfl_dot_v1_dot_index__pb2.IndexAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IndexIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocfl.v1.IndexService/IndexIDs',
            ocfl_dot_v1_dot_index__pb2.IndexIDsRequest.SerializeToString,
            ocfl_dot_v1_dot_index__pb2.IndexIDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListObjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocfl.v1.IndexService/ListObjects',
            ocfl_dot_v1_dot_index__pb2.ListObjectsRequest.SerializeToString,
            ocfl_dot_v1_dot_index__pb2.ListObjectsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocfl.v1.IndexService/GetObject',
            ocfl_dot_v1_dot_index__pb2.GetObjectRequest.SerializeToString,
            ocfl_dot_v1_dot_index__pb2.GetObjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObjectState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocfl.v1.IndexService/GetObjectState',
            ocfl_dot_v1_dot_index__pb2.GetObjectStateRequest.SerializeToString,
            ocfl_dot_v1_dot_index__pb2.GetObjectStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FollowLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ocfl.v1.IndexService/FollowLogs',
            ocfl_dot_v1_dot_index__pb2.FollowLogsRequest.SerializeToString,
            ocfl_dot_v1_dot_index__pb2.FollowLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
